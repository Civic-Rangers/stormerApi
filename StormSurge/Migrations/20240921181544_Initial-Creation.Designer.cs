// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository;

#nullable disable

namespace StormSurge.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20240921181544_Initial-Creation")]
    partial class InitialCreation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.FloodZone", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Address");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("FloodZones");
                });

            modelBuilder.Entity("Entities.ParkingSpot", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsFilled")
                        .HasColumnType("bit");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ParkingSpots");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1dd02b93-3851-45d9-8fbf-ca7d8affc275"),
                            Address = "Spot 101",
                            IsFilled = true
                        },
                        new
                        {
                            Id = new Guid("e2f96bd9-a0da-4a0d-a6ce-a5dd55cdc71e"),
                            Address = "Spot 202",
                            IsFilled = false
                        },
                        new
                        {
                            Id = new Guid("d01b4f4f-8737-478e-a148-fbc00cacaff9"),
                            Address = "Spot 303",
                            IsFilled = true
                        });
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("66696d8a-8073-46ff-b2aa-28b4aa0f87ac"),
                            Name = "Jon&Linda",
                            Password = "blllllll"
                        },
                        new
                        {
                            Id = new Guid("ee4cd460-b5ce-4af8-b608-d4f970df9943"),
                            Name = "BillieBob",
                            Password = "password"
                        },
                        new
                        {
                            Id = new Guid("d31436fa-9053-4c6f-ab53-3a9a08f5039c"),
                            Name = "Sally",
                            Password = "password"
                        });
                });

            modelBuilder.Entity("Entities.FloodZone", b =>
                {
                    b.HasOne("Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.ParkingSpot", b =>
                {
                    b.HasOne("Entities.User", "User")
                        .WithMany("ParkingSpots")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.Navigation("ParkingSpots");
                });
#pragma warning restore 612, 618
        }
    }
}
